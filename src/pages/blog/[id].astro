---
import type { GetStaticPaths } from 'astro'
import { getCollection, render } from 'astro:content'
import readingTime from 'reading-time'

import ContentWrapper from '@/components/ContentWrapper.astro'
import BlogLayout from '@/layouts/BlogLayout'
import client from '@/lib/client'

export const getStaticPaths = (async () => {
  const blogEntries = await getCollection('blog')

  return blogEntries.map((entry) => {
    return {
      params: { id: entry.id },
      props: { entry }
    }
  })
}) satisfies GetStaticPaths

const { entry } = Astro.props
const { Content, headings } = await render(entry)

const getLastUpdatedTime = client.api.github['last-updated-file']
const { latestCommitUrl, lastUpdatedTime } = await getLastUpdatedTime
  .$get({ query: { path: `blog/${entry.id}.mdx` } })
  .then(async (res) => {
    if (!res.ok) {
      console.error('GitHub API request failed:', res.status)
      return {
        latestCommitUrl: '',
        lastUpdatedTime: new Date().toISOString()
      }
    }
    return {
      latestCommitUrl: '',
      lastUpdatedTime: new Date().toISOString()
    }
  })
  .catch((error) => {
    console.error('Failed to fetch from GitHub API:', error)
    return {
      latestCommitUrl: '',
      lastUpdatedTime: new Date().toISOString()
    }
  })

const { minutes } = readingTime(entry.body!)
---

<BlogLayout
  headings={headings}
  id={entry.id}
  updatedDate={new Date(lastUpdatedTime)}
  latestCommitUrl={latestCommitUrl}
  readingTime={Math.ceil(minutes)}
  {...entry.data}
>
  <ContentWrapper content={Content} />
</BlogLayout>
