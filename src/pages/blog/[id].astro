---
import type { GetStaticPaths } from 'astro'
import { getCollection, render } from 'astro:content'
import readingTime from 'reading-time'

import ContentWrapper from '@/components/ContentWrapper.astro'
import BlogLayout from '@/layouts/BlogLayout'
import client from '@/lib/client'

export const getStaticPaths = (async () => {
  const blogEntries = await getCollection('blog')

  return blogEntries.map((entry) => {
    return {
      params: { id: entry.id },
      props: { entry }
    }
  })
}) satisfies GetStaticPaths

const { entry } = Astro.props
const { Content, headings } = await render(entry)

// Only fetch GitHub data if the blog post has a githubPath specified
let lastUpdatedTime = entry.data.updatedDate || new Date()
let latestCommitUrl = ''

if (entry.data.githubPath) {
  const getLastUpdatedTime = client.api.github['last-updated-file']
  const response = await getLastUpdatedTime
    .$get({ query: { path: entry.data.githubPath } })
    .then((res) => res.json())
    .catch(() => null)

  if (response) {
    lastUpdatedTime = new Date(response.lastUpdatedTime)
    latestCommitUrl = response.latestCommitUrl
  }
}

const { minutes } = readingTime(entry.body!)
---

<BlogLayout
  headings={headings}
  id={entry.id}
  updatedDate={lastUpdatedTime}
  latestCommitUrl={latestCommitUrl}
  readingTime={Math.ceil(minutes)}
  {...entry.data}
>
  <ContentWrapper content={Content} />
</BlogLayout>