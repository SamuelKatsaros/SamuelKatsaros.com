---
import type { GetStaticPaths } from 'astro'
import { getCollection, render } from 'astro:content'
import readingTime from 'reading-time'

import BlogLayout from '@/layouts/BlogLayout'
import client from '@/lib/client'

export const getStaticPaths = (async () => {
  const blogEntries = await getCollection('blog')
  return blogEntries.map((entry) => ({
    params: { id: entry.id },
    props: { entry }
  }))
}) satisfies GetStaticPaths

const { entry } = Astro.props
const { Content, headings } = await entry.render()

const response = await client.api.github['last-updated-file']
  .$get({ query: { path: `blog/${entry.id}.mdx` } })

const data = response.ok ? await response.json() : null
const latestCommitUrl = data?.latestCommitUrl ?? ''
const lastUpdatedTime = data?.lastUpdatedTime ?? new Date().toISOString()

const stats = readingTime(entry.body)

---

<BlogLayout
  {...entry.data}
  id={entry.id}
  headings={headings}
  updatedDate={new Date(lastUpdatedTime)}
  latestCommitUrl={latestCommitUrl}
  readingTime={Math.ceil(stats.minutes)}
>
  <Content />
</BlogLayout>
