---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import { getCollection, render } from 'astro:content'
import readingTime from 'reading-time'
import type { BreadcrumbList, WithContext } from 'schema-dts'

import ContentWrapper from '@/components/ContentWrapper.astro'
import ProjectLayout from '@/layouts/ProjectLayout'
import client from '@/lib/client'
import { getProjectSchema, projectWebsite } from '@/lib/structuredData'

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {}

export const getStaticPaths = (async () => {
  const projectEntries = await getCollection('projects')
  console.log('Available project IDs:', projectEntries.map(e => e.id))

  return projectEntries.map((entry) => ({
    params: { id: entry.id },
    props: { entry }
  }))
}) satisfies GetStaticPaths

const { entry } = Astro.props
console.log('Attempting to render project:', entry.id)

try {
  const { Content, headings } = await render(entry)
} catch (error) {
  console.error('Error rendering project:', entry.id, error)
  throw error;
}

// Only fetch GitHub data if the project has a githubPath
let lastUpdatedTime = entry.data.updatedDate || new Date()
let latestCommitUrl = ''

if (entry.data.githubPath) {
  const getLastUpdatedTime = client.api.github['last-updated-file']
  const response = await getLastUpdatedTime
    .$get({ query: { path: entry.data.githubPath } })
    .then((res) => res.json())
    .catch(() => null)

  if (response) {
    lastUpdatedTime = new Date(response.lastUpdatedTime)
    latestCommitUrl = response.latestCommitUrl
  }
}

const { minutes, words } = readingTime(entry.body!)

const projectStructuredData = getProjectSchema(entry)

const breadcrumbsStructuredData: WithContext<BreadcrumbList> = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  itemListElement: [
    {
      '@type': 'ListItem',
      position: 1,
      name: 'Projects',
      item: `${import.meta.env.SITE}/projects/`
    },
    {
      '@type': 'ListItem',
      position: 2,
      name: entry.data.title,
      item: `${import.meta.env.SITE}/projects/${entry.id}/`
    }
  ]
}

const jsonLd = {
  '@context': 'https://schema.org',
  '@graph': [projectStructuredData, breadcrumbsStructuredData, projectWebsite]
}
---

<ProjectLayout
  headings={headings}
  slug={entry.id}
  readingTime={Math.ceil(minutes)}
  wordsCount={words}
  updatedDate={new Date(lastUpdatedTime)}
  latestCommitUrl={latestCommitUrl}
  {...entry.data}
>
  <script
    is:inline
    type='application/ld+json'
    set:html={JSON.stringify(jsonLd)}
    slot='head'
  />
  <ContentWrapper content={Content} />
</ProjectLayout>